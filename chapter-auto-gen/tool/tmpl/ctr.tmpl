package controller

import (
	"elegantGo/chapter-auto-gen/controller/request"
	"elegantGo/chapter-auto-gen/controller/response"
	"elegantGo/chapter-auto-gen/repository"
	"elegantGo/chapter-auto-gen/repository/ent"
	"github.com/gin-gonic/gin"
)

type {{.Name}} struct {
	repo *repository.{{.Name}}
}

func New{{.Name}}(repo *repository.{{.Name}}) *{{.Name}} {
	ctr := new({{.Name}})
	ctr.repo = repo
	return ctr
}

func (ctr *{{.Name}}) Many(c *gin.Context) (response.Data, error) {
	request := new(request.{{.Name}}s)
	if err := c.ShouldBind(request); err != nil {
		return nil, err
	}

	dom{{.Name}}s := ctr.repo.FetchMany(c.Request.Context(), func(builder *ent.{{.Name}}Query) {
		builder.Offset(request.Offset.Value()).Limit(request.Limit.Value()).Order(request.Order.By(request.Sort.Value()))
	})

	var resp response.{{.Name}}s
	return resp.Mapper(dom{{.Name}}s), nil
}

func (ctr *{{.Name}}) One(c *gin.Context) (response.Data, error) {
	request := new(request.{{.Name}})
	if err := c.ShouldBind(request); err != nil {
		return nil, err
	}

	dom{{.Name}} := ctr.repo.Fetch(c.Request.Context(), request.ID)

	var resp *response.{{.Name}}
	return resp.Mapper(dom{{.Name}}), nil
}
