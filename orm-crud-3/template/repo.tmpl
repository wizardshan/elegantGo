package repository

import (
	"elegantGo/orm-crud-3/repository/ent"
	"elegantGo/orm-crud-3/repository/ent/{{.entName | ToLower}}"
	"context"
)

type {{.entName}} struct {
	repo
}

func New{{.entName}}(db *ent.Client) *{{.entName}} {
	repo := new({{.entName}})
	repo.db = db
	return repo
}

func (repo *{{.entName}}) Fetch(ctx context.Context, id int) *ent.{{.entName}} {
	return repo.fetchOne(ctx, repo.db, func(opt *ent.{{.entName}}Query) {
		opt.Where({{.entName | ToLower}}.ID(id))
	})
}

func (repo *{{.entName}}) FetchOne(ctx context.Context, optionFunc func(opt *ent.{{.entName}}Query)) *ent.{{.entName}} {
	return repo.fetchOne(ctx, repo.db, optionFunc)
}

func (repo *{{.entName}}) fetchOne(ctx context.Context, db *ent.Client, optionFunc func(opt *ent.{{.entName}}Query)) *ent.{{.entName}} {
	builder := db.{{.entName}}.Query()
	optionFunc(builder)
	return builder.FirstX(ctx)
}

func (repo *{{.entName}}) FetchMany(ctx context.Context, optionFunc func(opt *ent.{{.entName}}Query)) ent.{{.entName}}s {
	return repo.fetchMany(ctx, repo.db, optionFunc)
}

func (repo *{{.entName}}) fetchMany(ctx context.Context, db *ent.Client, optionFunc func(opt *ent.{{.entName}}Query)) ent.{{.entName}}s {
	builder := db.{{.entName}}.Query()
	optionFunc(builder)
	return builder.AllX(ctx)
}

func (repo *{{.entName}}) Count(ctx context.Context, optionFunc func(opt *ent.{{.entName}}Query)) int {
	return repo.count(ctx, repo.db, optionFunc)
}

func (repo *{{.entName}}) count(ctx context.Context, db *ent.Client, optionFunc func(opt *ent.{{.entName}}Query)) int {
	builder := db.{{.entName}}.Query()
	optionFunc(builder)
	return builder.CountX(ctx)
}

func (repo *{{.entName}}) Exist(ctx context.Context, optionFunc func(opt *ent.{{.entName}}Query)) bool {
	return repo.exist(ctx, repo.db, optionFunc)
}

func (repo *{{.entName}}) exist(ctx context.Context, db *ent.Client, optionFunc func(opt *ent.{{.entName}}Query)) bool {
	builder := db.{{.entName}}.Query()
	optionFunc(builder)
	return builder.ExistX(ctx)
}

func (repo *{{.entName}}) Create(ctx context.Context, optionFunc func(opt *ent.{{.entName}}Create)) *ent.{{.entName}} {
	return repo.create(ctx, repo.db, optionFunc)
}

func (repo *{{.entName}}) create(ctx context.Context, db *ent.Client, optionFunc func(opt *ent.{{.entName}}Create)) *ent.{{.entName}} {
	builder := db.{{.entName}}.Create()
	optionFunc(builder)
	return builder.SaveX(ctx)
}

func (repo *{{.entName}}) Update(ctx context.Context, optionFunc func(opt *ent.{{.entName}}Update)) int {
	return repo.update(ctx, repo.db, optionFunc)
}

func (repo *{{.entName}}) update(ctx context.Context, db *ent.Client, optionFunc func(opt *ent.{{.entName}}Update)) int {
	builder := db.{{.entName}}.Update()
	optionFunc(builder)
	return builder.SaveX(ctx)
}

func (repo *{{.entName}}) Delete(ctx context.Context, optionFunc func(opt *ent.{{.entName}}Delete)) int {
	return repo.delete(ctx, repo.db, optionFunc)
}

func (repo *{{.entName}}) delete(ctx context.Context, db *ent.Client, optionFunc func(opt *ent.{{.entName}}Delete)) int {
	builder := db.{{.entName}}.Delete()
	optionFunc(builder)
	return builder.ExecX(ctx)
}